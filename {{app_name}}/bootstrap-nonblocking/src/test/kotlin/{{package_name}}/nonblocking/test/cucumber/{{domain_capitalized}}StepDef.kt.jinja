package {{package_name}}.nonblocking.test.cucumber

import io.cucumber.datatable.DataTable
import io.cucumber.java8.En
import org.assertj.core.api.Assertions.assertThat
import org.springframework.boot.test.web.server.LocalServerPort
import org.springframework.r2dbc.core.DatabaseClient
import org.springframework.test.web.reactive.server.WebTestClient
import org.springframework.test.web.reactive.server.WebTestClient.ResponseSpec
import {{package_name}}.domain.model.{{domain_capitalized}}
import {{package_name}}.rest.exception.{{domain_capitalized}}ExceptionResponse
import {{package_name}}.rest.representation.{{domain_capitalized}}Info
import reactor.test.StepVerifier
import java.util.function.Consumer


class {{domain_capitalized}}StepDef(webTestClient: WebTestClient, client: DatabaseClient) : En {

  companion object {

    private const val LOCALHOST = "http://localhost:"
    private const val API_URI = "/api/v1/{{domain_plural}}"
  }

  @LocalServerPort
  private val port: Int = 0
  private lateinit var responseSpec: ResponseSpec

  init {

    DataTableType { row: Map<String, String> ->
      {{domain_capitalized}}(
        row["code"].toString().toLong(),
        row["description"].toString()
      )
    }

    Given("the following {{domain_plural}} exists in the library") { dataTable: DataTable ->
      val {{domain_plural}} = dataTable.asList({{domain_capitalized}}::class.java)
      val statements: MutableList<String> = mutableListOf();
      {{domain_plural}}.forEach { {{domain}} ->
        statements += "INSERT INTO {{domain_uppercase}}.T_{{domain_uppercase}}(CODE,DESCRIPTION) VALUES(" + {{domain}}.code + ", '" + {{domain}}.description + "')"
      }
      statements.forEach(Consumer { it: String ->
        client.sql(it).fetch().rowsUpdated().`as`(StepVerifier::create).expectNextCount(1)
          .verifyComplete()
      })
    }

    When("user requests for all {{domain_plural}}") {
      val url = "$LOCALHOST$port$API_URI"
      responseSpec = webTestClient.get().uri(url).exchange()
    }

    When("user requests for {{domain_plural}} by code {string}") { code: String? ->
      val url = "$LOCALHOST$port$API_URI/$code"
      responseSpec = webTestClient.get().uri(url).exchange()
    }

    When("user requests for {{domain_plural}} by id {string} that does not exists") { id: String? ->
      val url = "$LOCALHOST$port$API_URI/$id"
      responseSpec = webTestClient.get().uri(url).exchange()
    }

    Then("the user gets an exception {string}") { exception: String? ->
      responseSpec.expectStatus().isNotFound
      responseSpec.expectBody({{domain_capitalized}}ExceptionResponse::class.java)
        .consumeWith {
          assertThat(it.responseBody.message).isNotNull.isEqualTo(exception)
        }
    }

    Then("the user gets the following {{domain_plural}}") { dataTable: DataTable ->
      val expected{{domain_plural_capitalized}} = dataTable.asList({{domain_capitalized}}::class.java)

      responseSpec.expectStatus().isOk
        .expectBody({{domain_capitalized}}Info::class.java)
        .consumeWith {

          assertThat(it.responseBody.{{domain_plural}}).isNotNull.extracting("description")
            .containsAll(expected{{domain_plural_capitalized}}.map { it.description })
        }
    }

    Then("the user gets the following {{domain}}") { dataTable: DataTable ->
      val expected{{domain_plural_capitalized}} = dataTable.asList({{domain_capitalized}}::class.java)

      responseSpec.expectStatus().isOk
        .expectBody({{domain_capitalized}}::class.java)
        .consumeWith {

          assertThat(it.responseBody).isNotNull.extracting("description")
            .isIn(expected{{domain_plural_capitalized}}.map { it.description })
        }
    }
  }
}


